<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: reindexer.proto

namespace Reindexer\Grpc;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Namespace options for EnumNamespace call.
 *
 * Generated from protobuf message <code>reindexer.grpc.EnumNamespacesOptions</code>
 */
class EnumNamespacesOptions extends \Google\Protobuf\Internal\Message
{
    /**
     * Filter for names.
     *
     * Generated from protobuf field <code>string filter = 1;</code>
     */
    protected $filter = '';
    /**
     * To enumerate closed namespaces data also.
     *
     * Generated from protobuf field <code>bool withClosed = 2;</code>
     */
    protected $withClosed = false;
    /**
     * To provide only namespaces' names, no other information.
     *
     * Generated from protobuf field <code>bool onlyNames = 3;</code>
     */
    protected $onlyNames = false;
    /**
     * Not to enumerate systems namespaces.
     *
     * Generated from protobuf field <code>bool hideSystems = 4;</code>
     */
    protected $hideSystems = false;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $filter
     *           Filter for names.
     *     @type bool $withClosed
     *           To enumerate closed namespaces data also.
     *     @type bool $onlyNames
     *           To provide only namespaces' names, no other information.
     *     @type bool $hideSystems
     *           Not to enumerate systems namespaces.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Reindexer::initOnce();
        parent::__construct($data);
    }

    /**
     * Filter for names.
     *
     * Generated from protobuf field <code>string filter = 1;</code>
     * @return string
     */
    public function getFilter()
    {
        return $this->filter;
    }

    /**
     * Filter for names.
     *
     * Generated from protobuf field <code>string filter = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setFilter($var)
    {
        GPBUtil::checkString($var, True);
        $this->filter = $var;

        return $this;
    }

    /**
     * To enumerate closed namespaces data also.
     *
     * Generated from protobuf field <code>bool withClosed = 2;</code>
     * @return bool
     */
    public function getWithClosed()
    {
        return $this->withClosed;
    }

    /**
     * To enumerate closed namespaces data also.
     *
     * Generated from protobuf field <code>bool withClosed = 2;</code>
     * @param bool $var
     * @return $this
     */
    public function setWithClosed($var)
    {
        GPBUtil::checkBool($var);
        $this->withClosed = $var;

        return $this;
    }

    /**
     * To provide only namespaces' names, no other information.
     *
     * Generated from protobuf field <code>bool onlyNames = 3;</code>
     * @return bool
     */
    public function getOnlyNames()
    {
        return $this->onlyNames;
    }

    /**
     * To provide only namespaces' names, no other information.
     *
     * Generated from protobuf field <code>bool onlyNames = 3;</code>
     * @param bool $var
     * @return $this
     */
    public function setOnlyNames($var)
    {
        GPBUtil::checkBool($var);
        $this->onlyNames = $var;

        return $this;
    }

    /**
     * Not to enumerate systems namespaces.
     *
     * Generated from protobuf field <code>bool hideSystems = 4;</code>
     * @return bool
     */
    public function getHideSystems()
    {
        return $this->hideSystems;
    }

    /**
     * Not to enumerate systems namespaces.
     *
     * Generated from protobuf field <code>bool hideSystems = 4;</code>
     * @param bool $var
     * @return $this
     */
    public function setHideSystems($var)
    {
        GPBUtil::checkBool($var);
        $this->hideSystems = $var;

        return $this;
    }

}

