<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: reindexer.proto

namespace Reindexer\Grpc;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\GPBUtil;
use Google\Protobuf\Internal\RepeatedField;

/**
 * Storage options for a namespace.
 *
 * Generated from protobuf message <code>reindexer.grpc.StorageOptions</code>
 */
class StorageOptions extends \Google\Protobuf\Internal\Message {
    /**
     * Ns name.
     *
     * Generated from protobuf field <code>string nsName = 1;</code>
     */
    protected $nsName = '';
    /**
     * To work with physical storage or not.
     *
     * Generated from protobuf field <code>bool enabled = 2;</code>
     */
    protected $enabled = false;
    /**
     * In case of problems with storage it fails, otherwise
     * the error will be skipped and Reindexer won't work with it.
     *
     * Generated from protobuf field <code>bool dropOnFileFormatError = 3;</code>
     */
    protected $dropOnFileFormatError = false;
    /**
     * Creates database if it doesn't exist yet.
     *
     * Generated from protobuf field <code>bool createIfMissing = 4;</code>
     */
    protected $createIfMissing = false;
    /**
     * If true, all data read from storage will be
     * verified against corresponding checksums.
     *
     * Generated from protobuf field <code>bool verifyChecksums = 5;</code>
     */
    protected $verifyChecksums = false;
    /**
     * Should the data read for this iteration be cached in memory?
     * Callers may wish to set this field to false for bulk scans.
     *
     * Generated from protobuf field <code>bool fillCache = 6;</code>
     */
    protected $fillCache = false;
    /**
     * If true, the write will be flushed from the operating system
     * buffer cache before the write is considered complete. If this
     * flag is true, writes will be slower.
     * If false and the machine crashes, some recent writes may be lost.
     * Note that if it is just the process that crashes (i.e., the machine
     * does not reboot), no writes will be lost even if sync==false.
     *
     * Generated from protobuf field <code>bool sync = 7;</code>
     */
    protected $sync = false;
    /**
     * To work with namespace in slave mode.
     *
     * Generated from protobuf field <code>bool slaveMode = 8;</code>
     */
    protected $slaveMode = false;
    /**
     * To allow LevelDB or RocksDB to repair storage file
     * in case it is malfunctioned.
     *
     * Generated from protobuf field <code>bool autorepair = 9;</code>
     */
    protected $autorepair = false;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $nsName
     *           Ns name.
     *     @type bool $enabled
     *           To work with physical storage or not.
     *     @type bool $dropOnFileFormatError
     *           In case of problems with storage it fails, otherwise
     *           the error will be skipped and Reindexer won't work with it.
     *     @type bool $createIfMissing
     *           Creates database if it doesn't exist yet.
     *     @type bool $verifyChecksums
     *           If true, all data read from storage will be
     *           verified against corresponding checksums.
     *     @type bool $fillCache
     *           Should the data read for this iteration be cached in memory?
     *           Callers may wish to set this field to false for bulk scans.
     *     @type bool $sync
     *           If true, the write will be flushed from the operating system
     *           buffer cache before the write is considered complete. If this
     *           flag is true, writes will be slower.
     *           If false and the machine crashes, some recent writes may be lost.
     *           Note that if it is just the process that crashes (i.e., the machine
     *           does not reboot), no writes will be lost even if sync==false.
     *     @type bool $slaveMode
     *           To work with namespace in slave mode.
     *     @type bool $autorepair
     *           To allow LevelDB or RocksDB to repair storage file
     *           in case it is malfunctioned.
     * }
     */
    public function __construct($data = null) {
        \GPBMetadata\Reindexer::initOnce();
        parent::__construct($data);
    }

    /**
     * Ns name.
     *
     * Generated from protobuf field <code>string nsName = 1;</code>
     * @return string
     */
    public function getNsName() {
        return $this->nsName;
    }

    /**
     * Ns name.
     *
     * Generated from protobuf field <code>string nsName = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setNsName($var) {
        GPBUtil::checkString($var, true);
        $this->nsName = $var;

        return $this;
    }

    /**
     * To work with physical storage or not.
     *
     * Generated from protobuf field <code>bool enabled = 2;</code>
     * @return bool
     */
    public function getEnabled() {
        return $this->enabled;
    }

    /**
     * To work with physical storage or not.
     *
     * Generated from protobuf field <code>bool enabled = 2;</code>
     * @param bool $var
     * @return $this
     */
    public function setEnabled($var) {
        GPBUtil::checkBool($var);
        $this->enabled = $var;

        return $this;
    }

    /**
     * In case of problems with storage it fails, otherwise
     * the error will be skipped and Reindexer won't work with it.
     *
     * Generated from protobuf field <code>bool dropOnFileFormatError = 3;</code>
     * @return bool
     */
    public function getDropOnFileFormatError() {
        return $this->dropOnFileFormatError;
    }

    /**
     * In case of problems with storage it fails, otherwise
     * the error will be skipped and Reindexer won't work with it.
     *
     * Generated from protobuf field <code>bool dropOnFileFormatError = 3;</code>
     * @param bool $var
     * @return $this
     */
    public function setDropOnFileFormatError($var) {
        GPBUtil::checkBool($var);
        $this->dropOnFileFormatError = $var;

        return $this;
    }

    /**
     * Creates database if it doesn't exist yet.
     *
     * Generated from protobuf field <code>bool createIfMissing = 4;</code>
     * @return bool
     */
    public function getCreateIfMissing() {
        return $this->createIfMissing;
    }

    /**
     * Creates database if it doesn't exist yet.
     *
     * Generated from protobuf field <code>bool createIfMissing = 4;</code>
     * @param bool $var
     * @return $this
     */
    public function setCreateIfMissing($var) {
        GPBUtil::checkBool($var);
        $this->createIfMissing = $var;

        return $this;
    }

    /**
     * If true, all data read from storage will be
     * verified against corresponding checksums.
     *
     * Generated from protobuf field <code>bool verifyChecksums = 5;</code>
     * @return bool
     */
    public function getVerifyChecksums() {
        return $this->verifyChecksums;
    }

    /**
     * If true, all data read from storage will be
     * verified against corresponding checksums.
     *
     * Generated from protobuf field <code>bool verifyChecksums = 5;</code>
     * @param bool $var
     * @return $this
     */
    public function setVerifyChecksums($var) {
        GPBUtil::checkBool($var);
        $this->verifyChecksums = $var;

        return $this;
    }

    /**
     * Should the data read for this iteration be cached in memory?
     * Callers may wish to set this field to false for bulk scans.
     *
     * Generated from protobuf field <code>bool fillCache = 6;</code>
     * @return bool
     */
    public function getFillCache() {
        return $this->fillCache;
    }

    /**
     * Should the data read for this iteration be cached in memory?
     * Callers may wish to set this field to false for bulk scans.
     *
     * Generated from protobuf field <code>bool fillCache = 6;</code>
     * @param bool $var
     * @return $this
     */
    public function setFillCache($var) {
        GPBUtil::checkBool($var);
        $this->fillCache = $var;

        return $this;
    }

    /**
     * If true, the write will be flushed from the operating system
     * buffer cache before the write is considered complete. If this
     * flag is true, writes will be slower.
     * If false and the machine crashes, some recent writes may be lost.
     * Note that if it is just the process that crashes (i.e., the machine
     * does not reboot), no writes will be lost even if sync==false.
     *
     * Generated from protobuf field <code>bool sync = 7;</code>
     * @return bool
     */
    public function getSync() {
        return $this->sync;
    }

    /**
     * If true, the write will be flushed from the operating system
     * buffer cache before the write is considered complete. If this
     * flag is true, writes will be slower.
     * If false and the machine crashes, some recent writes may be lost.
     * Note that if it is just the process that crashes (i.e., the machine
     * does not reboot), no writes will be lost even if sync==false.
     *
     * Generated from protobuf field <code>bool sync = 7;</code>
     * @param bool $var
     * @return $this
     */
    public function setSync($var) {
        GPBUtil::checkBool($var);
        $this->sync = $var;

        return $this;
    }

    /**
     * To work with namespace in slave mode.
     *
     * Generated from protobuf field <code>bool slaveMode = 8;</code>
     * @return bool
     */
    public function getSlaveMode() {
        return $this->slaveMode;
    }

    /**
     * To work with namespace in slave mode.
     *
     * Generated from protobuf field <code>bool slaveMode = 8;</code>
     * @param bool $var
     * @return $this
     */
    public function setSlaveMode($var) {
        GPBUtil::checkBool($var);
        $this->slaveMode = $var;

        return $this;
    }

    /**
     * To allow LevelDB or RocksDB to repair storage file
     * in case it is malfunctioned.
     *
     * Generated from protobuf field <code>bool autorepair = 9;</code>
     * @return bool
     */
    public function getAutorepair() {
        return $this->autorepair;
    }

    /**
     * To allow LevelDB or RocksDB to repair storage file
     * in case it is malfunctioned.
     *
     * Generated from protobuf field <code>bool autorepair = 9;</code>
     * @param bool $var
     * @return $this
     */
    public function setAutorepair($var) {
        GPBUtil::checkBool($var);
        $this->autorepair = $var;

        return $this;
    }
}
